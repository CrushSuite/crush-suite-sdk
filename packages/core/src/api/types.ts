import { PrecomplianceEventType } from "./constants";

export interface CrushSuiteConfig {
  privateKey: string;
  sandboxKey?: string;
  // shopDomain: string;
  _environment?: "production" | "staging";
}

export interface Product {
  id: string;
  title: string;
  description: string;
}

export interface CrushSuiteAPI {
  // getProducts(): Promise<Product[]>;
  // getProductById(id: string): Promise<Product>;
  compliance: {
    complianceEvent(eventData: any): Promise<any>;
    prepurchaseCompliance(complianceData: any): Promise<any>;
  };
}

/**
 * Precompliance event types
 * These are generated by Prisma and used to track the precompliance process.
 */
export type PrecomplianceEventType =
  (typeof PrecomplianceEventType)[keyof typeof PrecomplianceEventType];

/** Order compliance types
 * These types are used for checking compliance of orders
 * and for the precompliance process.
 */
export type OrderCheckComplianceAddress = {
  firstName: string;
  lastName: string;
  businessName?: string;
  street1: string;
  street2?: string;
  city: string;
  postalCode: string;
  stateCode: string;
  country: string; // 2 letter country code, e.g. 'US', 'CA'
};

export type OrderCheckComplianceDOB = {
  day: number;
  month: number;
  year: number;
};

export type OrderCheckComplianceRequest = {
  variants: { id: number; quantity: number }[];
  billToAddress: OrderCheckComplianceAddress;
  shipToAddress: OrderCheckComplianceAddress;
  dob: OrderCheckComplianceDOB;
  email: string;
  phoneNumber: string; // Must be 10-digit US phone number
};

export type ComplianceFee = { [key: VariantId]: Quantity };

type VariantId = number;
type Quantity = number;

export interface Compliance {
  valid: boolean;
  errors: string[];
}

export interface OrderCheckComplianceResponse {
  valid: boolean;
  complianceFee: ComplianceFee | null;
  complianceKey: string | null;
  errors: string[];
}

export type OrderCheckComplianceFeeRequest = {
  shippingStateCode: string;
  variants: { id: number; quantity: number }[];
};

export interface OrderCheckComplianceFeeResponse {
  fee: ComplianceFee | null;
  total: number;
}

export interface PurchasedOrderItem {
  productType: string;
  name: string;
  quantity: number;
  isComplianceProduct: boolean;
  isVinoshipperProduct: boolean;
  isDbProduct: boolean;
  compliancePartnerProductId: string;
  platformVariantId: string;
  dbProductId: number;
}

export interface PrecomplianceEvent {
  sessionId: string;
  eventType: PrecomplianceEventType;
  failedReason?: string;
  failedPayload?: string; // JSON
  failedUser?: string; // JSON
}

// this gets saved to redis
export interface PrecomplianceCustomer {
  email: string;
  firstName: string;
  lastName: string;
  address: {
    street1: string;
    street2?: string | null;
    city: string;
    postalCode: string;
    stateCode: string;
  };
  dateOfBirth: PrecomplianceCustomerDOB;
}

export type PrecomplianceCustomerDOB = {
  day: number;
  month: number;
  year: number;
};
